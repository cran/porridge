// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_porridge_RCPPEXPORTS_H_GEN_
#define RCPP_porridge_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace porridge {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("porridge", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("porridge", "_porridge_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in porridge");
            }
        }
    }

    inline arma::mat _armaRidgePgen(const arma::mat& S, const arma::mat& lambda, const arma::mat& target, const int& nInit, const double& minSuccDiff) {
        typedef SEXP(*Ptr__armaRidgePgen)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr__armaRidgePgen p__armaRidgePgen = NULL;
        if (p__armaRidgePgen == NULL) {
            validateSignature("arma::mat(*_armaRidgePgen)(const arma::mat&,const arma::mat&,const arma::mat&,const int&,const double&)");
            p__armaRidgePgen = (Ptr__armaRidgePgen)R_GetCCallable("porridge", "_porridge__armaRidgePgen");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p__armaRidgePgen(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(target)), Shield<SEXP>(Rcpp::wrap(nInit)), Shield<SEXP>(Rcpp::wrap(minSuccDiff)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline double _armaKcvlossR(arma::mat& lambda, arma::mat& Y, arma::mat& target, Rcpp::List& folds, const int& nInit, const double& minSuccDiff) {
        typedef SEXP(*Ptr__armaKcvlossR)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr__armaKcvlossR p__armaKcvlossR = NULL;
        if (p__armaKcvlossR == NULL) {
            validateSignature("double(*_armaKcvlossR)(arma::mat&,arma::mat&,arma::mat&,Rcpp::List&,const int&,const double&)");
            p__armaKcvlossR = (Ptr__armaKcvlossR)R_GetCCallable("porridge", "_porridge__armaKcvlossR");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p__armaKcvlossR(Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(target)), Shield<SEXP>(Rcpp::wrap(folds)), Shield<SEXP>(Rcpp::wrap(nInit)), Shield<SEXP>(Rcpp::wrap(minSuccDiff)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline arma::mat _armaPenaltyPgen_banded(double& lambda, int p, arma::uvec& zerosR, arma::uvec& zerosC, bool penalize_diag) {
        typedef SEXP(*Ptr__armaPenaltyPgen_banded)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr__armaPenaltyPgen_banded p__armaPenaltyPgen_banded = NULL;
        if (p__armaPenaltyPgen_banded == NULL) {
            validateSignature("arma::mat(*_armaPenaltyPgen_banded)(double&,int,arma::uvec&,arma::uvec&,bool)");
            p__armaPenaltyPgen_banded = (Ptr__armaPenaltyPgen_banded)R_GetCCallable("porridge", "_porridge__armaPenaltyPgen_banded");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p__armaPenaltyPgen_banded(Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(p)), Shield<SEXP>(Rcpp::wrap(zerosR)), Shield<SEXP>(Rcpp::wrap(zerosC)), Shield<SEXP>(Rcpp::wrap(penalize_diag)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat _armaPenaltyPgen_groups(arma::vec& lambda, arma::vec& groups, arma::uvec& zerosR, arma::uvec& zerosC, bool penalize_diag) {
        typedef SEXP(*Ptr__armaPenaltyPgen_groups)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr__armaPenaltyPgen_groups p__armaPenaltyPgen_groups = NULL;
        if (p__armaPenaltyPgen_groups == NULL) {
            validateSignature("arma::mat(*_armaPenaltyPgen_groups)(arma::vec&,arma::vec&,arma::uvec&,arma::uvec&,bool)");
            p__armaPenaltyPgen_groups = (Ptr__armaPenaltyPgen_groups)R_GetCCallable("porridge", "_porridge__armaPenaltyPgen_groups");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p__armaPenaltyPgen_groups(Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(groups)), Shield<SEXP>(Rcpp::wrap(zerosR)), Shield<SEXP>(Rcpp::wrap(zerosC)), Shield<SEXP>(Rcpp::wrap(penalize_diag)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline double _armaKCVlossR_groups(arma::vec& lambdaGrps, arma::mat& Y, arma::mat& target, Rcpp::List& folds, arma::vec& groups, arma::uvec& zerosR, arma::uvec& zerosC, bool penalize_diag, const int& nInit, const double& minSuccDiff) {
        typedef SEXP(*Ptr__armaKCVlossR_groups)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr__armaKCVlossR_groups p__armaKCVlossR_groups = NULL;
        if (p__armaKCVlossR_groups == NULL) {
            validateSignature("double(*_armaKCVlossR_groups)(arma::vec&,arma::mat&,arma::mat&,Rcpp::List&,arma::vec&,arma::uvec&,arma::uvec&,bool,const int&,const double&)");
            p__armaKCVlossR_groups = (Ptr__armaKCVlossR_groups)R_GetCCallable("porridge", "_porridge__armaKCVlossR_groups");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p__armaKCVlossR_groups(Shield<SEXP>(Rcpp::wrap(lambdaGrps)), Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(target)), Shield<SEXP>(Rcpp::wrap(folds)), Shield<SEXP>(Rcpp::wrap(groups)), Shield<SEXP>(Rcpp::wrap(zerosR)), Shield<SEXP>(Rcpp::wrap(zerosC)), Shield<SEXP>(Rcpp::wrap(penalize_diag)), Shield<SEXP>(Rcpp::wrap(nInit)), Shield<SEXP>(Rcpp::wrap(minSuccDiff)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double _armaKCVlossR_banded(double& lambda, arma::mat& Y, arma::mat& target, Rcpp::List& folds, arma::uvec& zerosR, arma::uvec& zerosC, bool penalize_diag, const int& nInit, const double& minSuccDiff) {
        typedef SEXP(*Ptr__armaKCVlossR_banded)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr__armaKCVlossR_banded p__armaKCVlossR_banded = NULL;
        if (p__armaKCVlossR_banded == NULL) {
            validateSignature("double(*_armaKCVlossR_banded)(double&,arma::mat&,arma::mat&,Rcpp::List&,arma::uvec&,arma::uvec&,bool,const int&,const double&)");
            p__armaKCVlossR_banded = (Ptr__armaKCVlossR_banded)R_GetCCallable("porridge", "_porridge__armaKCVlossR_banded");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p__armaKCVlossR_banded(Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(target)), Shield<SEXP>(Rcpp::wrap(folds)), Shield<SEXP>(Rcpp::wrap(zerosR)), Shield<SEXP>(Rcpp::wrap(zerosC)), Shield<SEXP>(Rcpp::wrap(penalize_diag)), Shield<SEXP>(Rcpp::wrap(nInit)), Shield<SEXP>(Rcpp::wrap(minSuccDiff)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline Rcpp::List _armaRidgeGGMmixture(const arma::mat& Y, const int K, const double lambda, const arma::mat& target, const arma::mat& iWeights, const int& nInit, const double& minSuccDiff, const double& minMixProp) {
        typedef SEXP(*Ptr__armaRidgeGGMmixture)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr__armaRidgeGGMmixture p__armaRidgeGGMmixture = NULL;
        if (p__armaRidgeGGMmixture == NULL) {
            validateSignature("Rcpp::List(*_armaRidgeGGMmixture)(const arma::mat&,const int,const double,const arma::mat&,const arma::mat&,const int&,const double&,const double&)");
            p__armaRidgeGGMmixture = (Ptr__armaRidgeGGMmixture)R_GetCCallable("porridge", "_porridge__armaRidgeGGMmixture");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p__armaRidgeGGMmixture(Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(K)), Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(target)), Shield<SEXP>(Rcpp::wrap(iWeights)), Shield<SEXP>(Rcpp::wrap(nInit)), Shield<SEXP>(Rcpp::wrap(minSuccDiff)), Shield<SEXP>(Rcpp::wrap(minMixProp)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline double _armaKcvlGGMmixture(double lambda, const arma::mat& Y, const int K, const arma::mat& target, const arma::mat& iWeights, const int& nInit, const double& minSuccDiff, Rcpp::List folds, const double& minMixProp) {
        typedef SEXP(*Ptr__armaKcvlGGMmixture)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr__armaKcvlGGMmixture p__armaKcvlGGMmixture = NULL;
        if (p__armaKcvlGGMmixture == NULL) {
            validateSignature("double(*_armaKcvlGGMmixture)(double,const arma::mat&,const int,const arma::mat&,const arma::mat&,const int&,const double&,Rcpp::List,const double&)");
            p__armaKcvlGGMmixture = (Ptr__armaKcvlGGMmixture)R_GetCCallable("porridge", "_porridge__armaKcvlGGMmixture");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p__armaKcvlGGMmixture(Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(K)), Shield<SEXP>(Rcpp::wrap(target)), Shield<SEXP>(Rcpp::wrap(iWeights)), Shield<SEXP>(Rcpp::wrap(nInit)), Shield<SEXP>(Rcpp::wrap(minSuccDiff)), Shield<SEXP>(Rcpp::wrap(folds)), Shield<SEXP>(Rcpp::wrap(minMixProp)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline Rcpp::List _armaRidgePrepEM(arma::mat Y, arma::ivec ids, const double lambdaZ, const double lambdaE, const arma::mat& targetZ, const arma::mat& targetE, const int& nInit, const double& minSuccDiff) {
        typedef SEXP(*Ptr__armaRidgePrepEM)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr__armaRidgePrepEM p__armaRidgePrepEM = NULL;
        if (p__armaRidgePrepEM == NULL) {
            validateSignature("Rcpp::List(*_armaRidgePrepEM)(arma::mat,arma::ivec,const double,const double,const arma::mat&,const arma::mat&,const int&,const double&)");
            p__armaRidgePrepEM = (Ptr__armaRidgePrepEM)R_GetCCallable("porridge", "_porridge__armaRidgePrepEM");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p__armaRidgePrepEM(Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(ids)), Shield<SEXP>(Rcpp::wrap(lambdaZ)), Shield<SEXP>(Rcpp::wrap(lambdaE)), Shield<SEXP>(Rcpp::wrap(targetZ)), Shield<SEXP>(Rcpp::wrap(targetE)), Shield<SEXP>(Rcpp::wrap(nInit)), Shield<SEXP>(Rcpp::wrap(minSuccDiff)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline double _armaRidgePrepKcvLL(const arma::vec lambdaZE, const arma::mat& Y, const arma::ivec& ids, const arma::mat& targetZ, const arma::mat& targetE, const int& nInit, const double& minSuccDiff, Rcpp::List folds, std::string CVcrit) {
        typedef SEXP(*Ptr__armaRidgePrepKcvLL)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr__armaRidgePrepKcvLL p__armaRidgePrepKcvLL = NULL;
        if (p__armaRidgePrepKcvLL == NULL) {
            validateSignature("double(*_armaRidgePrepKcvLL)(const arma::vec,const arma::mat&,const arma::ivec&,const arma::mat&,const arma::mat&,const int&,const double&,Rcpp::List,std::string)");
            p__armaRidgePrepKcvLL = (Ptr__armaRidgePrepKcvLL)R_GetCCallable("porridge", "_porridge__armaRidgePrepKcvLL");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p__armaRidgePrepKcvLL(Shield<SEXP>(Rcpp::wrap(lambdaZE)), Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(ids)), Shield<SEXP>(Rcpp::wrap(targetZ)), Shield<SEXP>(Rcpp::wrap(targetE)), Shield<SEXP>(Rcpp::wrap(nInit)), Shield<SEXP>(Rcpp::wrap(minSuccDiff)), Shield<SEXP>(Rcpp::wrap(folds)), Shield<SEXP>(Rcpp::wrap(CVcrit)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline Rcpp::List _armaRidgePrepEMdiag(arma::mat Y, arma::ivec ids, const double lambdaZ, const arma::mat& targetZ, const unsigned int& nInit, const double& minSuccDiff) {
        typedef SEXP(*Ptr__armaRidgePrepEMdiag)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr__armaRidgePrepEMdiag p__armaRidgePrepEMdiag = NULL;
        if (p__armaRidgePrepEMdiag == NULL) {
            validateSignature("Rcpp::List(*_armaRidgePrepEMdiag)(arma::mat,arma::ivec,const double,const arma::mat&,const unsigned int&,const double&)");
            p__armaRidgePrepEMdiag = (Ptr__armaRidgePrepEMdiag)R_GetCCallable("porridge", "_porridge__armaRidgePrepEMdiag");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p__armaRidgePrepEMdiag(Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(ids)), Shield<SEXP>(Rcpp::wrap(lambdaZ)), Shield<SEXP>(Rcpp::wrap(targetZ)), Shield<SEXP>(Rcpp::wrap(nInit)), Shield<SEXP>(Rcpp::wrap(minSuccDiff)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline double _armaRidgePrepKcvLLdiag(const double lambdaZ, const arma::mat& Y, const arma::ivec& ids, const arma::mat& targetZ, const int& nInit, const double& minSuccDiff, Rcpp::List folds, std::string CVcrit) {
        typedef SEXP(*Ptr__armaRidgePrepKcvLLdiag)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr__armaRidgePrepKcvLLdiag p__armaRidgePrepKcvLLdiag = NULL;
        if (p__armaRidgePrepKcvLLdiag == NULL) {
            validateSignature("double(*_armaRidgePrepKcvLLdiag)(const double,const arma::mat&,const arma::ivec&,const arma::mat&,const int&,const double&,Rcpp::List,std::string)");
            p__armaRidgePrepKcvLLdiag = (Ptr__armaRidgePrepKcvLLdiag)R_GetCCallable("porridge", "_porridge__armaRidgePrepKcvLLdiag");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p__armaRidgePrepKcvLLdiag(Shield<SEXP>(Rcpp::wrap(lambdaZ)), Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(ids)), Shield<SEXP>(Rcpp::wrap(targetZ)), Shield<SEXP>(Rcpp::wrap(nInit)), Shield<SEXP>(Rcpp::wrap(minSuccDiff)), Shield<SEXP>(Rcpp::wrap(folds)), Shield<SEXP>(Rcpp::wrap(CVcrit)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

}

#endif // RCPP_porridge_RCPPEXPORTS_H_GEN_
