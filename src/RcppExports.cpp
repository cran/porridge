// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/porridge.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ridgeGGMmixture
Rcpp::List ridgeGGMmixture(const arma::mat& Y, const int K, const double lambda, const arma::mat& target, const arma::mat& iWeights, const int& nInit, const double& minSuccDiff, const double& minMixProp);
RcppExport SEXP _porridge_ridgeGGMmixture(SEXP YSEXP, SEXP KSEXP, SEXP lambdaSEXP, SEXP targetSEXP, SEXP iWeightsSEXP, SEXP nInitSEXP, SEXP minSuccDiffSEXP, SEXP minMixPropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type iWeights(iWeightsSEXP);
    Rcpp::traits::input_parameter< const int& >::type nInit(nInitSEXP);
    Rcpp::traits::input_parameter< const double& >::type minSuccDiff(minSuccDiffSEXP);
    Rcpp::traits::input_parameter< const double& >::type minMixProp(minMixPropSEXP);
    rcpp_result_gen = Rcpp::wrap(ridgeGGMmixture(Y, K, lambda, target, iWeights, nInit, minSuccDiff, minMixProp));
    return rcpp_result_gen;
END_RCPP
}
// kcvlGGMmixture
double kcvlGGMmixture(double lambda, const arma::mat& Y, const int K, const arma::mat& target, const arma::mat& iWeights, const int& nInit, const double& minSuccDiff, Rcpp::List folds, const double& minMixProp);
RcppExport SEXP _porridge_kcvlGGMmixture(SEXP lambdaSEXP, SEXP YSEXP, SEXP KSEXP, SEXP targetSEXP, SEXP iWeightsSEXP, SEXP nInitSEXP, SEXP minSuccDiffSEXP, SEXP foldsSEXP, SEXP minMixPropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type iWeights(iWeightsSEXP);
    Rcpp::traits::input_parameter< const int& >::type nInit(nInitSEXP);
    Rcpp::traits::input_parameter< const double& >::type minSuccDiff(minSuccDiffSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type folds(foldsSEXP);
    Rcpp::traits::input_parameter< const double& >::type minMixProp(minMixPropSEXP);
    rcpp_result_gen = Rcpp::wrap(kcvlGGMmixture(lambda, Y, K, target, iWeights, nInit, minSuccDiff, folds, minMixProp));
    return rcpp_result_gen;
END_RCPP
}
// ridgePgen
arma::mat ridgePgen(const arma::mat& S, const arma::mat& lambda, const arma::mat& target, const int& nInit, const double& minSuccDiff);
RcppExport SEXP _porridge_ridgePgen(SEXP SSEXP, SEXP lambdaSEXP, SEXP targetSEXP, SEXP nInitSEXP, SEXP minSuccDiffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const int& >::type nInit(nInitSEXP);
    Rcpp::traits::input_parameter< const double& >::type minSuccDiff(minSuccDiffSEXP);
    rcpp_result_gen = Rcpp::wrap(ridgePgen(S, lambda, target, nInit, minSuccDiff));
    return rcpp_result_gen;
END_RCPP
}
// kcvlossR
double kcvlossR(arma::mat& lambda, arma::mat& Y, arma::mat& target, Rcpp::List& folds, const int& nInit, const double& minSuccDiff);
RcppExport SEXP _porridge_kcvlossR(SEXP lambdaSEXP, SEXP YSEXP, SEXP targetSEXP, SEXP foldsSEXP, SEXP nInitSEXP, SEXP minSuccDiffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type folds(foldsSEXP);
    Rcpp::traits::input_parameter< const int& >::type nInit(nInitSEXP);
    Rcpp::traits::input_parameter< const double& >::type minSuccDiff(minSuccDiffSEXP);
    rcpp_result_gen = Rcpp::wrap(kcvlossR(lambda, Y, target, folds, nInit, minSuccDiff));
    return rcpp_result_gen;
END_RCPP
}
// penaltyPgen_banded
arma::mat penaltyPgen_banded(double& lambda, int p, arma::uvec& zerosR, arma::uvec& zerosC, bool penalize_diag);
RcppExport SEXP _porridge_penaltyPgen_banded(SEXP lambdaSEXP, SEXP pSEXP, SEXP zerosRSEXP, SEXP zerosCSEXP, SEXP penalize_diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type zerosR(zerosRSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type zerosC(zerosCSEXP);
    Rcpp::traits::input_parameter< bool >::type penalize_diag(penalize_diagSEXP);
    rcpp_result_gen = Rcpp::wrap(penaltyPgen_banded(lambda, p, zerosR, zerosC, penalize_diag));
    return rcpp_result_gen;
END_RCPP
}
// penaltyPgen_groups
arma::mat penaltyPgen_groups(arma::vec& lambda, arma::vec& groups, arma::uvec& zerosR, arma::uvec& zerosC, bool penalize_diag);
RcppExport SEXP _porridge_penaltyPgen_groups(SEXP lambdaSEXP, SEXP groupsSEXP, SEXP zerosRSEXP, SEXP zerosCSEXP, SEXP penalize_diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type zerosR(zerosRSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type zerosC(zerosCSEXP);
    Rcpp::traits::input_parameter< bool >::type penalize_diag(penalize_diagSEXP);
    rcpp_result_gen = Rcpp::wrap(penaltyPgen_groups(lambda, groups, zerosR, zerosC, penalize_diag));
    return rcpp_result_gen;
END_RCPP
}
// kcvlossR_groups
double kcvlossR_groups(arma::vec& lambdaGrps, arma::mat& Y, arma::mat& target, Rcpp::List& folds, arma::vec& groups, arma::uvec& zerosR, arma::uvec& zerosC, bool penalize_diag, const int& nInit, const double& minSuccDiff);
RcppExport SEXP _porridge_kcvlossR_groups(SEXP lambdaGrpsSEXP, SEXP YSEXP, SEXP targetSEXP, SEXP foldsSEXP, SEXP groupsSEXP, SEXP zerosRSEXP, SEXP zerosCSEXP, SEXP penalize_diagSEXP, SEXP nInitSEXP, SEXP minSuccDiffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type lambdaGrps(lambdaGrpsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type folds(foldsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type zerosR(zerosRSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type zerosC(zerosCSEXP);
    Rcpp::traits::input_parameter< bool >::type penalize_diag(penalize_diagSEXP);
    Rcpp::traits::input_parameter< const int& >::type nInit(nInitSEXP);
    Rcpp::traits::input_parameter< const double& >::type minSuccDiff(minSuccDiffSEXP);
    rcpp_result_gen = Rcpp::wrap(kcvlossR_groups(lambdaGrps, Y, target, folds, groups, zerosR, zerosC, penalize_diag, nInit, minSuccDiff));
    return rcpp_result_gen;
END_RCPP
}
// kcvlossR_banded
double kcvlossR_banded(double& lambda, arma::mat& Y, arma::mat& target, Rcpp::List& folds, arma::uvec& zerosR, arma::uvec& zerosC, bool penalize_diag, const int& nInit, const double& minSuccDiff);
RcppExport SEXP _porridge_kcvlossR_banded(SEXP lambdaSEXP, SEXP YSEXP, SEXP targetSEXP, SEXP foldsSEXP, SEXP zerosRSEXP, SEXP zerosCSEXP, SEXP penalize_diagSEXP, SEXP nInitSEXP, SEXP minSuccDiffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type folds(foldsSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type zerosR(zerosRSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type zerosC(zerosCSEXP);
    Rcpp::traits::input_parameter< bool >::type penalize_diag(penalize_diagSEXP);
    Rcpp::traits::input_parameter< const int& >::type nInit(nInitSEXP);
    Rcpp::traits::input_parameter< const double& >::type minSuccDiff(minSuccDiffSEXP);
    rcpp_result_gen = Rcpp::wrap(kcvlossR_banded(lambda, Y, target, folds, zerosR, zerosC, penalize_diag, nInit, minSuccDiff));
    return rcpp_result_gen;
END_RCPP
}
// mixTargets
arma::mat mixTargets(const Rcpp::List targetList, const arma::vec lambda);
RcppExport SEXP _porridge_mixTargets(SEXP targetListSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type targetList(targetListSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(mixTargets(targetList, lambda));
    return rcpp_result_gen;
END_RCPP
}
// armaRidgePmultiT
arma::mat armaRidgePmultiT(const arma::mat& S, arma::vec lambda, const Rcpp::List& targetList);
RcppExport SEXP _porridge_armaRidgePmultiT(SEXP SSEXP, SEXP lambdaSEXP, SEXP targetListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type targetList(targetListSEXP);
    rcpp_result_gen = Rcpp::wrap(armaRidgePmultiT(S, lambda, targetList));
    return rcpp_result_gen;
END_RCPP
}
// ridgePrepEM
Rcpp::List ridgePrepEM(arma::mat Y, arma::ivec ids, const double lambdaZ, const double lambdaE, const arma::mat& targetZ, const arma::mat& targetE, const int& nInit, const double& minSuccDiff);
RcppExport SEXP _porridge_ridgePrepEM(SEXP YSEXP, SEXP idsSEXP, SEXP lambdaZSEXP, SEXP lambdaESEXP, SEXP targetZSEXP, SEXP targetESEXP, SEXP nInitSEXP, SEXP minSuccDiffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< const double >::type lambdaZ(lambdaZSEXP);
    Rcpp::traits::input_parameter< const double >::type lambdaE(lambdaESEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type targetZ(targetZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type targetE(targetESEXP);
    Rcpp::traits::input_parameter< const int& >::type nInit(nInitSEXP);
    Rcpp::traits::input_parameter< const double& >::type minSuccDiff(minSuccDiffSEXP);
    rcpp_result_gen = Rcpp::wrap(ridgePrepEM(Y, ids, lambdaZ, lambdaE, targetZ, targetE, nInit, minSuccDiff));
    return rcpp_result_gen;
END_RCPP
}
// ridgePrepKcvLL
double ridgePrepKcvLL(const arma::vec lambdaZE, const arma::mat& Y, const arma::ivec& ids, const arma::mat& targetZ, const arma::mat& targetE, const int& nInit, const double& minSuccDiff, Rcpp::List folds, std::string CVcrit);
RcppExport SEXP _porridge_ridgePrepKcvLL(SEXP lambdaZESEXP, SEXP YSEXP, SEXP idsSEXP, SEXP targetZSEXP, SEXP targetESEXP, SEXP nInitSEXP, SEXP minSuccDiffSEXP, SEXP foldsSEXP, SEXP CVcritSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type lambdaZE(lambdaZESEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type targetZ(targetZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type targetE(targetESEXP);
    Rcpp::traits::input_parameter< const int& >::type nInit(nInitSEXP);
    Rcpp::traits::input_parameter< const double& >::type minSuccDiff(minSuccDiffSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type folds(foldsSEXP);
    Rcpp::traits::input_parameter< std::string >::type CVcrit(CVcritSEXP);
    rcpp_result_gen = Rcpp::wrap(ridgePrepKcvLL(lambdaZE, Y, ids, targetZ, targetE, nInit, minSuccDiff, folds, CVcrit));
    return rcpp_result_gen;
END_RCPP
}
// ridgePrepEMdiag
Rcpp::List ridgePrepEMdiag(arma::mat Y, arma::ivec ids, const double lambdaZ, const arma::mat& targetZ, const unsigned int& nInit, const double& minSuccDiff);
RcppExport SEXP _porridge_ridgePrepEMdiag(SEXP YSEXP, SEXP idsSEXP, SEXP lambdaZSEXP, SEXP targetZSEXP, SEXP nInitSEXP, SEXP minSuccDiffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< const double >::type lambdaZ(lambdaZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type targetZ(targetZSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type nInit(nInitSEXP);
    Rcpp::traits::input_parameter< const double& >::type minSuccDiff(minSuccDiffSEXP);
    rcpp_result_gen = Rcpp::wrap(ridgePrepEMdiag(Y, ids, lambdaZ, targetZ, nInit, minSuccDiff));
    return rcpp_result_gen;
END_RCPP
}
// ridgePrepKcvLLdiag
double ridgePrepKcvLLdiag(const double lambdaZ, const arma::mat& Y, const arma::ivec& ids, const arma::mat& targetZ, const int& nInit, const double& minSuccDiff, Rcpp::List folds, std::string CVcrit);
RcppExport SEXP _porridge_ridgePrepKcvLLdiag(SEXP lambdaZSEXP, SEXP YSEXP, SEXP idsSEXP, SEXP targetZSEXP, SEXP nInitSEXP, SEXP minSuccDiffSEXP, SEXP foldsSEXP, SEXP CVcritSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type lambdaZ(lambdaZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type targetZ(targetZSEXP);
    Rcpp::traits::input_parameter< const int& >::type nInit(nInitSEXP);
    Rcpp::traits::input_parameter< const double& >::type minSuccDiff(minSuccDiffSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type folds(foldsSEXP);
    Rcpp::traits::input_parameter< std::string >::type CVcrit(CVcritSEXP);
    rcpp_result_gen = Rcpp::wrap(ridgePrepKcvLLdiag(lambdaZ, Y, ids, targetZ, nInit, minSuccDiff, folds, CVcrit));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _porridge_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _porridge_RcppExport_registerCCallable() { 
    R_RegisterCCallable("porridge", "_porridge_RcppExport_validate", (DL_FUNC)_porridge_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_porridge_ridgeGGMmixture", (DL_FUNC) &_porridge_ridgeGGMmixture, 8},
    {"_porridge_kcvlGGMmixture", (DL_FUNC) &_porridge_kcvlGGMmixture, 9},
    {"_porridge_ridgePgen", (DL_FUNC) &_porridge_ridgePgen, 5},
    {"_porridge_kcvlossR", (DL_FUNC) &_porridge_kcvlossR, 6},
    {"_porridge_penaltyPgen_banded", (DL_FUNC) &_porridge_penaltyPgen_banded, 5},
    {"_porridge_penaltyPgen_groups", (DL_FUNC) &_porridge_penaltyPgen_groups, 5},
    {"_porridge_kcvlossR_groups", (DL_FUNC) &_porridge_kcvlossR_groups, 10},
    {"_porridge_kcvlossR_banded", (DL_FUNC) &_porridge_kcvlossR_banded, 9},
    {"_porridge_mixTargets", (DL_FUNC) &_porridge_mixTargets, 2},
    {"_porridge_armaRidgePmultiT", (DL_FUNC) &_porridge_armaRidgePmultiT, 3},
    {"_porridge_ridgePrepEM", (DL_FUNC) &_porridge_ridgePrepEM, 8},
    {"_porridge_ridgePrepKcvLL", (DL_FUNC) &_porridge_ridgePrepKcvLL, 9},
    {"_porridge_ridgePrepEMdiag", (DL_FUNC) &_porridge_ridgePrepEMdiag, 6},
    {"_porridge_ridgePrepKcvLLdiag", (DL_FUNC) &_porridge_ridgePrepKcvLLdiag, 8},
    {"_porridge_RcppExport_registerCCallable", (DL_FUNC) &_porridge_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_porridge(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
